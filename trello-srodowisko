{
	"info": {
		"_postman_id": "3190839f-1f3b-4d2d-a066-a9ee0af27edb",
		"name": "kolekcja 1",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "19932332",
		"_collection_link": "https://www.postman.com/aviation-pilot-14165867/workspace/my-workspace/collection/19932332-3190839f-1f3b-4d2d-a066-a9ee0af27edb?action=share&source=collection_link&creator=19932332"
	},
	"item": [
		{
			"name": "New Request",
			"request": {
				"auth": {
					"type": "basic"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://jsonplaceholder.typicode.com/posts?userId=1&userId=2&_limit=3",
					"protocol": "https",
					"host": [
						"jsonplaceholder",
						"typicode",
						"com"
					],
					"path": [
						"posts"
					],
					"query": [
						{
							"key": "userId",
							"value": "1"
						},
						{
							"key": "userId",
							"value": "2"
						},
						{
							"key": "_limit",
							"value": "3"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "post",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"/*pm.test(\"Global\",()=>{ \r",
							"  const responseBody = pm.response.json();\r",
							"  console.log(responseBody)\r",
							"  const globalValues = pm.globals.get(\"postG\")\r",
							"  pm.expect(responseBody.title).equals(globalValues)\r",
							"\r",
							"})\r",
							"*/\r",
							"function showCaptrion2(){\r",
							"    console.log(\"test2\")\r",
							"}\r",
							"showCaptrion2()\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"function getRandomInt(min, max) {\r",
							"    console.log(Math.random())\r",
							"    console.log(Math.random() * (max - min + 1))\r",
							"   console.log(Math.floor(Math.random() * (max - min + 1)) + min);\r",
							"\r",
							"return Math.floor(Math.random() * (max - min + 1)) + min;\r",
							"}\r",
							"\r",
							"function randomEmail(){\r",
							"\r",
							"    return (\"emailAddres\"+getRandomInt(1,20000)+\"@gmail.com\");\r",
							"}\r",
							"console.log(randomEmail());\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"userId\" : {{userIDG}},\r\n    \"id\" : 1625,\r\n    \"title\" : \"{{postG}}\",\r\n    \"body\" : \"{{bodyG}}\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://jsonplaceholder.typicode.com/posts",
					"protocol": "https",
					"host": [
						"jsonplaceholder",
						"typicode",
						"com"
					],
					"path": [
						"posts"
					]
				}
			},
			"response": []
		},
		{
			"name": "get comments",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Should verify status code\",()=>{\r",
							" //   console.log(pm.response)\r",
							"    pm.expect(pm.response.code).to.equal(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Respone less than 200ms\",()=>{\r",
							"    pm.expect(pm.response.responseTime).to.have.lessThan(800)\r",
							"})\r",
							"\r",
							"pm.test(\"Status equal OK\",()=>{\r",
							"    pm.expect(pm.response.status).to.have.string(\"OK\")\r",
							"})\r",
							"\r",
							"pm.test(\"Status is string\",()=>{\r",
							"    pm.expect(pm.response.status).to.be.a('string');\r",
							"})\r",
							"\r",
							"pm.test(\"Should verify post id\",()=>{\r",
							"    const responseBody = pm.response.json();\r",
							"    responseBody.forEach(el=>{\r",
							"      //  console.log(el.email)\r",
							"        pm.expect(el.id).to.be.greaterThan(0)\r",
							"    })\r",
							"})\r",
							"\r",
							"\r",
							"pm.test(\"Name should be longer than 30 letters\",()=>{\r",
							"    const responseBody = pm.response.json();\r",
							"    responseBody.forEach(el=>{\r",
							"        pm.expect(el.email.length).to.be.lessThan(50)\r",
							"   \r",
							"    })\r",
							"})\r",
							"\r",
							"pm.test(\"Content type\",()=>{\r",
							" console.log( pm.response.headers.json())\r",
							"    \r",
							"\r",
							"   \r",
							"    \r",
							"})\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://jsonplaceholder.typicode.com/comments",
					"protocol": "https",
					"host": [
						"jsonplaceholder",
						"typicode",
						"com"
					],
					"path": [
						"comments"
					]
				}
			},
			"response": []
		}
	]
}